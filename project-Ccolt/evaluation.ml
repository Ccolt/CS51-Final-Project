(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
                             Spring 2018
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)
    
open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error *)
exception EvalError of string ;;
(* Exception for evaluator runtime, generated by an explicit "raise" construct *)
exception EvalException ;;


(*......................................................................
  Environments and values 
 *)

module type Env_type = sig
    type env
    type value =
      | Val of expr
      | Closure of (expr * env)
    val create : unit -> env
    val close : expr -> env -> value
    val lookup : env -> varid -> value
    val extend : env -> varid -> value ref -> env
    val env_to_string : env -> string
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : Env_type =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    (* Creates an empty environment *)
    let create () : env = [] ;;

    (* Creates a closure from an expression and the environment it's
       defined in *)
    let close (exp : expr) (env : env) : value =
      Closure(exp, env) ;;
    (* Looks up the value of a variable in the environment *)
    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> raise (EvalError "env list is empty")
      | (var, valref) :: t -> if var = varname then !valref
                              else lookup t varname ;;
    (* Returns a new environment just like env except that it maps the
       ariable varid to loc *)
    
    let rec extend (env : env) (varname : varid) (loc : value ref) : env =
      match env with
      | [] -> (varname, loc) :: env
      | (var, valref) :: t -> if var = varname then (var, loc) :: t else
                              (var, valref) :: (extend t varname loc) ;;

    (* Returns a printable string representation of a value; the flag
       printenvp determines whether to include the environment in the
       string representation when called on a closure *)
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val expr -> exp_to_abstract_string expr
      | Closure (expr, env) ->
        if printenvp then
          (exp_to_abstract_string expr) ^ (env_to_string env)
        else
          exp_to_abstract_string expr

    (* Returns a printable string representation of an environment *)
    and env_to_string (env : env) : string =
      match env with
      | [] -> ""
      | (varid, vref) :: t ->
        "[" ^ varid ^ value_to_string !vref ^ "] " ^ env_to_string t
  end
;;


(*......................................................................
  Evaluation functions

  Returns a result of type value of evaluating the expression exp
  in the environment env. We've provided an initial implementation
  for a trivial evaluator, which just converts the expression
  unchanged to a value and returns it, along with "stub code" for
  three more evaluators: a substitution model evaluator and dynamic
  and lexical environment model versions.

  Each evaluator is of type expr -> Env.env -> Env.value for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* Function to evaluate a Binary operation  *)
let binopeval (op : binop) (Env.Val(e1) : Env.value) 
              (Env.Val(e2) : Env.value) : Env.value = 
  match e1, e2 with
  | Num v1, Num v2 ->
    (match op with
    | Plus -> Env.Val(Num(v1 + v2))
    | Minus -> Env.Val(Num(v1 - v2))
    | Times -> Env.Val(Num(v1 * v2))
    | Equals -> Env.Val(Bool(v1 = v2))
    | LessThan -> Env.Val(Bool(v1 < v2)))
  | Bool v1, Bool v2 ->
    (match op with
    | Equals -> Env.Val(Bool(v1 = v2))
    | _ -> raise (EvalError "Invalid operands to binop"))
  | _ -> raise (EvalError "Invalid operands to binop");;
  
(* Function to evaluate a Unary operation  *)
let unopeval (op : unop) (Env.Val(e) : Env.value) : Env.value =
  match op with
  | Negate -> (match e with
              | Num n -> Env.Val(Num(~-n))
              | _ -> raise (EvalError "Invalid operands to unop"))

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
let rec eval_s (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var _ -> raise (EvalError "unbound variable in eval_s")
  | Num _ | Bool _ | Fun (_, _) -> Env.Val(exp)
  | Unop (op, exp1) -> unopeval op (eval_s exp1 env)
  | Binop (op, exp1, exp2) -> binopeval op (eval_s exp1 env) (eval_s exp2 env)
  | Conditional (exp1, exp2, exp3) -> let Env.Val(e) = (eval_s exp1 env) in
                                      (match e with
                                      | Bool b -> 
                                        if b
                                        then (eval_s exp2 env)
                                        else (eval_s exp3 env)
                                      | _ -> raise (EvalError "If statement
                                                    requires boolean"))
  | Let (var, def, body) -> let Env.Val(evald_def) = (eval_s def env) in 
                            eval_s (subst var evald_def body) env
  | Letrec (var, def, body) -> 
      let repl = Letrec(var, def, Var(var)) in
      let Env.Val(repl2) = (eval_s (subst var repl def) env) in 
      eval_s (subst var repl2 body) env

  (*let rec x = v in P −−→ P[x → v[x → let rec x = v in x]]
      let newbod = subst var repl body in
   * Letrec (var, def, body) -> 
      let repl = Letrec(var, def, Var(var)) in
      let Env.Val(q') = eval_s (subst var repl def) env in
      eval_s (subst var q' body) env*)
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "variable is unassigned")
  | App (f, a) -> 
    match (eval_s f env) with
    | Env.Val(Fun (var, exp1)) -> let Env.Val(evald_def) = (eval_s a env) in
                                  eval_s (subst var evald_def exp1) env
    | _ -> raise (EvalError "__ isn't a function and can't be
                            applied")
  

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var id -> Env.lookup env id
  | Num _ | Bool _ | Fun (_, _) -> Env.Val(exp)
  | Unop (op, exp1) -> unopeval op (eval_d exp1 env)
  | Binop (op, exp1, exp2) -> binopeval op (eval_d exp1 env) (eval_d exp2 env)
  | Conditional (exp1, exp2, exp3) -> 
      let Env.Val(e) = (eval_d exp1 env) in
        (match e with
        | Bool b -> 
          if b
          then (eval_d exp2 env)
          else (eval_d exp3 env)
        | _ -> raise (EvalError "If statement requires boolean"))
  | Let (var, def, body) -> 
      eval_d body (Env.extend env var (ref (eval_d def env)))
  | Letrec (var, def, body) ->
      let new_env = Env.extend env var (ref (Env.Val(Unassigned))) in
      let new_def = eval_d def new_env in
      let env_ext = Env.extend new_env var (ref new_def) in
      eval_d body env_ext
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "variable is unassigned")
  | App (p, q) -> 
      let Env.Val(vpe) = eval_d p env in
      match vpe with 
      | Fun(x,b) -> 
          eval_d b (Env.extend env x (ref (eval_d q env)))
      | _ -> raise (EvalError "__ isn't a function and can't be applied")

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Var id -> Env.lookup env id
  | Num _ | Bool _ -> Env.Val(exp)
  | Fun (_, _) -> Env.close exp env
  | Unop (op, exp1) -> unopeval op (eval_l exp1 env)
  | Binop (op, exp1, exp2) -> binopeval op (eval_l exp1 env) (eval_l exp2 env)
  | Conditional (exp1, exp2, exp3) -> 
      (match (eval_l exp1 env) with
      | Env.Val(e) -> 
        (match e with
        | Bool b -> 
          if b
          then (eval_l exp2 env)
          else (eval_l exp3 env)
        | _ -> raise (EvalError "If statement requires boolean"))
      | _ -> raise (EvalError "If statement requires boolean"))
  | Let (var, def, body) -> 
      eval_l body (Env.extend env var (ref (eval_l def env)))
  | Letrec (var, def, body) ->
      let new_env = Env.extend env var (ref (Env.Val(Unassigned))) in
      let new_def = eval_l def new_env in
      let env_ext = Env.extend new_env var (ref new_def) in
      eval_l body env_ext
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "variable is unassigned")
  | App (p, q) -> 
      (match eval_l p env with
      | Env.Closure(v, env') ->
        (match v with 
        | Fun(x,b) -> 
            eval_l b (Env.extend env' x (ref (eval_l q env)))
        | _ -> raise (EvalError "__ isn't a function and can't be applied"))
      | _ -> raise (EvalError "__ isn't a function and can't be applied"))

(* Connecting the evaluators to the external world. The REPL in
   miniml.ml uses a call to the single function evaluate defined
   here. Initially, evaluate is the trivial evaluator eval_t. But you
   can define it to use any of the other evaluators as you proceed to
   implement them. (We will directly unit test the four evaluators
   above, not the evaluate function, so it doesn't matter how it's set
   when you submit your solution.) *)
   
let evaluate = eval_l ;;
